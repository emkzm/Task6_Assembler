extrn ExitProcess :proc, ; Используя директиву extrn, сообщим ассемблеру, что в коде будут использоваться функции, определенные вне данного модуля (функции WinAPI):
      MessageBoxA :proc

.data										; С помощью директивы DB определим строки для хранения заголовка окна и выводимого сообщения:
caption db 'СГУ КНиИТ ПИ', 0
message db 'Иванов Максим 251 группа',  0

.code
Start proc
; В Windows x86-64 используется единое соглашение вызовов __fastcall,
; поэтому для успешного вызова функций WinAPI нам потребуется подготовить стек для четырех аргументов,
; а также выровнять его по 16-байтовой границе. Так как при входе в любую процедуру (в том числе Start)
; в стек добавляется 8-байтовый адрес возврата, в сумме нам потребуется выделить 40 байт 
; (32 на аргументы + 8 для установки правильного смещения): 
  sub RSP, 8*5


						; В MASMx86-64, в соответствии с соглашением __fastcall, 
						; нам потребуется передать значения аргументов в регистры RCX, RDX, R8 и R9 соответственно:
  xor RCX, RCX
  lea RDX, message
  lea R8, caption
  xor R9, R9

; Обратите внимание на то, что в RDX и R8 передаются адреса переменных message и caption. 
; В соответствии с сигнатурой функции эти переменные должны быть переданы по указателю.

; После того, как значения аргументов были установлены, нам остается лишь осуществить непосредственный вызов MessageBoxA:


  call MessageBoxA ; В C-подобных языках вызов MessageBoxA выглядел бы следующим образом 
				   ; (чтобы лучше понять, почему выбраны именно эти значения для аргументов,
				   ; можете обратиться к MSDN и найти информацию по функции MessageBox): MessageBoxA(0, &message, &caption, 0)


; Теперь, когда все необходимые действия выполнены, нам остается лишь корректно завершить выполнение программы. 
; Для этого вызовем функцию ExitProcess с аргументом 0, говорящем о том, что выполнение программы прошло без ошибок:

  xor RCX, RCX		; аргумент 0

  call ExitProcess
Start endp
end

